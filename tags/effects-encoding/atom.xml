<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Tech, Science, Math and more... - effects encoding</title>
    <link href="https://jproyo.github.io/tags/effects-encoding/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://jproyo.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2021-03-17T00:00:00+00:00</updated>
    <id>https://jproyo.github.io/tags/effects-encoding/atom.xml</id>
    <entry xml:lang="en">
        <title>Encoding Effects using freer-simple</title>
        <published>2021-03-17T00:00:00+00:00</published>
        <updated>2021-03-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://jproyo.github.io/posts/2021-03-17-encoding-effects-with-freer-simple/" type="text/html"/>
        <id>https://jproyo.github.io/posts/2021-03-17-encoding-effects-with-freer-simple/</id>
        
        <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;In previous posts I have &lt;a href=&quot;&#x2F;posts&#x2F;2019-03-17-tagless-final-haskell.html&quot;&gt;written&lt;&#x2F;a&gt; about how encode &lt;strong&gt;Effects&lt;&#x2F;strong&gt; (e.g. IO, Database access and Caching) using a &lt;strong&gt;Tagless Final&lt;&#x2F;strong&gt; approach.
On that article, the idea was to show how to organize a program which can have different &lt;em&gt;Effects&lt;&#x2F;em&gt; and compose and combine them in a single program. I&#x27;ve also explored the &lt;em&gt;technique&lt;&#x2F;em&gt; of &lt;strong&gt;Tagless Final&lt;&#x2F;strong&gt; for representing the encoding and &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;mtl&quot;&gt;&lt;strong&gt;mtl&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; in particular to &lt;em&gt;handle or interpret&lt;&#x2F;em&gt; effects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;context&quot;&gt;Context&lt;&#x2F;h2&gt;
&lt;p&gt;The majority of Industry Software Solutions nowadays cannot escape to be connected to an external Service or System. Although there are some cases where our Solutions does not need connecting to an external service, the program still needs some kind of monitoring, metrics and logs before being shipped into a production environment. Taking these into consideration, it seems inevitable to deal with side effects in our language. Therefore &lt;strong&gt;Effectful computations&lt;&#x2F;strong&gt; or &lt;strong&gt;Algebraic Effect Handlers&lt;&#x2F;strong&gt; is a very interesting and important topic for me, because it encodes &lt;strong&gt;Effects&lt;&#x2F;strong&gt; as a &lt;em&gt;&lt;strong&gt;first-class&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; citizen in our &lt;em&gt;FP Programs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Everyone of us, as &lt;strong&gt;Functional Programming Developer&lt;&#x2F;strong&gt; want to deal only with &lt;em&gt;pure&lt;&#x2F;em&gt; functions and we don&#x27;t want to deal with &lt;em&gt;side effects&lt;&#x2F;em&gt;. But &lt;em&gt;pure FP&lt;&#x2F;em&gt; can happen only on small portions of our software solutions in the Industry and at the end we need to deal with &lt;em&gt;side effects&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As I&#x27;ve explained in my previous article there are several ways to encode &lt;strong&gt;Effects&lt;&#x2F;strong&gt; in order to write our program with &lt;em&gt;&lt;strong&gt;pure functions&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; and write the interpretation or &lt;em&gt;&lt;strong&gt;side effects computations&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; to specific &lt;em&gt;Effect&lt;&#x2F;em&gt; in a decouple way. In such a way we end up with a &lt;strong&gt;Pure Program&lt;&#x2F;strong&gt; that could be run or interpret later with &lt;strong&gt;Side effects computations&lt;&#x2F;strong&gt;. This &lt;strong&gt;powerful abstraction&lt;&#x2F;strong&gt; allow us to &lt;em&gt;reason&lt;&#x2F;em&gt; about our programs as we do with &lt;em&gt;pure functions&lt;&#x2F;em&gt; but at the same time having the ability to run it in other &lt;em&gt;non-pure&lt;&#x2F;em&gt; contexts.&lt;&#x2F;p&gt;
&lt;p&gt;After trying different approach and libraries for encoding and handling &lt;strong&gt;effects&lt;&#x2F;strong&gt; in production systems, I would like to explain my experience using &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;freer-simple&quot;&gt;&lt;em&gt;freer-simple&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; which is one of my favourite and also the one that I am currently using.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;freer-simple&quot;&gt;freer-simple&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;freer-simple&quot;&gt;&lt;em&gt;freer-simple&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; is an &lt;strong&gt;Effect System&lt;&#x2F;strong&gt; library based on some of the famous papers of &lt;cite&gt;Oleg Kiselyov et al.&lt;a href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Haskell&#x2F;extensible&#x2F;more.pdf&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;cite&gt; about &lt;strong&gt;Free Monads&lt;&#x2F;strong&gt; and &lt;strong&gt;Extensible Effects&lt;&#x2F;strong&gt;. The features that are pointed out from the library doc it self are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Efficient Effect system&lt;&#x2F;li&gt;
&lt;li&gt;Some implementations of common MTL Monads&lt;&#x2F;li&gt;
&lt;li&gt;Components for defining Custom Effects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One key feature that is not explicitly mentioned on the library doc is that &lt;strong&gt;Effect&lt;&#x2F;strong&gt; encoding is done at &lt;strong&gt;Type level&lt;&#x2F;strong&gt; using and &lt;em&gt;Extensible Open Union Type&lt;&#x2F;em&gt; (a type-indexed coproduct of functors) as it is clearly explain &lt;a href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Haskell&#x2F;extensible&#x2F;exteff.pdf&quot;&gt;here&lt;&#x2F;a&gt;. This means that the unpeel of the different &lt;em&gt;Effectful&lt;&#x2F;em&gt; layers are being done in compile time and at the same time it is constant with respect to the size of the Union.&lt;&#x2F;p&gt;
&lt;p&gt;Another important aspect of the implementation of the library is that it used a single &lt;strong&gt;Monad&lt;&#x2F;strong&gt; which is &lt;code&gt;Eff r a&lt;&#x2F;code&gt;, avoiding the need of stacking multiple Monad scaping to the quadratic $$O(n^2)$$ instance definitions problem in &lt;strong&gt;Monad Transformers&lt;&#x2F;strong&gt;. The common question that might arise here is: How the &lt;strong&gt;effects&lt;&#x2F;strong&gt; are handle if they are not stacked and are orthogonal? The answer is using &lt;strong&gt;Coroutines&lt;&#x2F;strong&gt;: &lt;em&gt;&amp;quot;a computation sends a request and suspends, waiting for a reply; a handler waits for a request, handles what it can, and resumes the client&amp;quot;&lt;&#x2F;em&gt;&lt;a href=&quot;http:&#x2F;&#x2F;okmij.org&#x2F;ftp&#x2F;Haskell&#x2F;extensible&#x2F;exteff.pdf&quot;&gt;2&lt;&#x2F;a&gt;. This is implemented with Continuation Monad.&lt;&#x2F;p&gt;
&lt;p&gt;Lets see some examples on how to use it. For that propose I am going to use a real example that I had to do but i am going to change some names in order to preserve privacy and details of the solution behind.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;freer-simple-by-example&quot;&gt;freer-simple by Example&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;use-case&quot;&gt;Use Case&lt;&#x2F;h3&gt;
&lt;p&gt;The use case was the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell z-code&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;As an user I want to upload some personal documents
to the system in order to complete my identification process.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is also known as &lt;em&gt;&lt;strong&gt;KYC (Known your Customer)&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; process. So, lets assume that we need to run this kind of process and identify the user, asking for some personal documentation to verify them. In that case we need to be able to provide some mean to the user that is already registered in our System to allow them upload those documents.&lt;&#x2F;p&gt;
&lt;p&gt;Lets assume &lt;strong&gt;w.l.o.g.&lt;&#x2F;strong&gt; that our Solution is going to use &lt;strong&gt;AWS S3&lt;&#x2F;strong&gt; as a Storage Provider for the documentation and &lt;strong&gt;PostgreSQL&lt;&#x2F;strong&gt; as a Relational Database for storing related data to that user and document. We are going to need that DB in order to store the &lt;strong&gt;reference or document path to S3&lt;&#x2F;strong&gt; in order to be able to recover that specific document later if it is requested by the user or by other means.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand we are going to expose this capability as a &lt;em&gt;REST API&lt;&#x2F;em&gt; endpoint and we are going to use &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;servant&quot;&gt;&lt;strong&gt;servant&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; for that matter.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;program&quot;&gt;Program&lt;&#x2F;h3&gt;
&lt;p&gt;First lets create the main algorithm of our program that should do the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Received the Requested Document &lt;code&gt;ByteString&lt;&#x2F;code&gt; with some metadata associated in order to identify the user&lt;&#x2F;li&gt;
&lt;li&gt;If the user does not exist in our system (Not registered yet) throw an error.&lt;&#x2F;li&gt;
&lt;li&gt;If the user is registered, upload the document to S3&lt;&#x2F;li&gt;
&lt;li&gt;If the upload was successful, store the S3 reference to our DB&lt;&#x2F;li&gt;
&lt;li&gt;Return this reference to the user&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In Haskell lingua this should be like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt;           &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer.Error&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;FE&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;uploadDocument&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;
               &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Document&lt;&#x2F;span&gt;
               &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;uploadDocument doc &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
  ifM
    (userExists (doc^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;document&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;userId))
    ( &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;do&lt;&#x2F;span&gt;
       ref &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; uploadDoc doc
       logInfo (&lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Document was uploaded in &lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&amp;gt;&lt;&#x2F;span&gt; show ref)
       setDocumentUploaded doc ref
       return ref
    )
    &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;FE&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;throwError &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;USER_NOT_FOUND&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Lets start analyzing this code. &lt;code&gt;Members &#x27;[DocStorage, DataAccess, Logging, AppError] eff&lt;&#x2F;code&gt; &lt;em&gt;Constraint&lt;&#x2F;em&gt; is indexed by an &lt;strong&gt;Open Union Type&lt;&#x2F;strong&gt; &lt;code&gt;[DocStorage, DataAccess, Logging, AppError]&lt;&#x2F;code&gt; whose &lt;em&gt;Coproduct&lt;&#x2F;em&gt; indicates what are the possible effects that &lt;code&gt;eff&lt;&#x2F;code&gt; can encode into. This is telling to the compiler that our &lt;code&gt;Eff eff a&lt;&#x2F;code&gt; are &lt;em&gt;constraining&lt;&#x2F;em&gt; by this &lt;strong&gt;Open Union Type&lt;&#x2F;strong&gt; and we can interleave any of those &lt;em&gt;Effects&lt;&#x2F;em&gt; throughout all the computation, without needing any lifting because we are not stacking &lt;em&gt;Monads&lt;&#x2F;em&gt; as in &lt;strong&gt;Monad Transformer&lt;&#x2F;strong&gt; approach.&lt;&#x2F;p&gt;
&lt;p&gt;We need to see now all the Effects that are involved in the &lt;strong&gt;Open Union Type&lt;&#x2F;strong&gt; which in this case are: &lt;code&gt;[DocStorage, DataAccess, Logging, AppError]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;effects&quot;&gt;Effects&lt;&#x2F;h3&gt;
&lt;p&gt;In &lt;strong&gt;freer-simple&lt;&#x2F;strong&gt; library there is a tool set for defining &lt;em&gt;Custom Effects&lt;&#x2F;em&gt; as well as some already provided common effects that can be found in &lt;strong&gt;Monad Transformer&lt;&#x2F;strong&gt; libraries like &lt;strong&gt;mtl&lt;&#x2F;strong&gt;. In my example I am using both kind of effects, already built in effects that are packed with it &lt;em&gt;Handlers&lt;&#x2F;em&gt; and &lt;em&gt;Custom&lt;&#x2F;em&gt; Effects that we need to build and provider the specific &lt;em&gt;Handler&lt;&#x2F;em&gt; for them.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Custom&lt;&#x2F;em&gt; effects in my example are: &lt;code&gt;DocStorage&lt;&#x2F;code&gt;, &lt;code&gt;DataAccess&lt;&#x2F;code&gt; and &lt;code&gt;Logging&lt;&#x2F;code&gt;. Last one could have been implemented using &lt;code&gt;Writer&lt;&#x2F;code&gt; effect provided by the library but I prefer something custom in order to interpret that effect using &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;co-log&quot;&gt;co-log&lt;&#x2F;a&gt; library.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Built-in&lt;&#x2F;em&gt; effect in this example is &lt;code&gt;AppError&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;custom-effects&quot;&gt;Custom Effects&lt;&#x2F;h4&gt;
&lt;p&gt;In Custom Effects you need to provide the definition of the &lt;strong&gt;GADT&lt;&#x2F;strong&gt; which describes the Algebra of your Effect and the function that introduces or &lt;code&gt;send&lt;&#x2F;code&gt; that Algebra to the &lt;code&gt;Eff r a&lt;&#x2F;code&gt; &lt;em&gt;Monad&lt;&#x2F;em&gt; whose indexed &lt;strong&gt;Open Union Type&lt;&#x2F;strong&gt; is contained in. With this function we are injecting our &lt;em&gt;Algebra&lt;&#x2F;em&gt; into that index list.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: It is important to point out that &lt;strong&gt;freer-simple&lt;&#x2F;strong&gt; provides &lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;Template_Haskell&quot;&gt;Template Haskell&lt;&#x2F;a&gt; tooling for auto-generate the &lt;code&gt;send&lt;&#x2F;code&gt; injecting
functions for us, but I&#x27;ve preferred to be a little more boilerplate for educational purpose.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;docstorage-effect&quot;&gt;DocStorage Effect&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;where&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UploadDocument&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Document&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;uploadDoc&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Member&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Document&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;uploadDoc &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;send &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UploadDocument&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;dataaccess-effect&quot;&gt;DataAccess Effect&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;where&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UserExists&lt;&#x2F;span&gt;          &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UserId&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;SetDocumentUploaded&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Document&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;userExists&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Member&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;UserId&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;userExists &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;send &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UserExists&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;setDocumentUploaded&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Member&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Document&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;setDocumentUploaded doc &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;send &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;SetDocumentUploaded&lt;&#x2F;span&gt; doc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;logging-effect&quot;&gt;Logging Effect&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; r &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;where&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogInfo&lt;&#x2F;span&gt;   &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogError&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;logInfo&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Member&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;logInfo &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;send &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogInfo&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;logError&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Member&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;logError &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;send &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogError&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;built-in-effects&quot;&gt;Built-In Effects&lt;&#x2F;h4&gt;
&lt;p&gt;In the case of &lt;em&gt;built-in&lt;&#x2F;em&gt; effects the effort is minimum because the Effect and handler is already provided by the library and we only need to define some aliases, but only if we want as in my case.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-haskell&quot;&gt;{-# &lt;span class=&quot;z-keyword z-other z-preprocessor z-haskell&quot;&gt;LANGUAGE&lt;&#x2F;span&gt; PatternSynonyms #-}&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer.Error&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Err&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;NotFound&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Text&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;InternalError&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Text&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Forbidden&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Text&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;BadRequest&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Text&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-meta z-deriving z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;deriving&lt;&#x2F;span&gt; (&lt;span class=&quot;z-entity z-other z-inherited-class z-haskell&quot;&gt;Eq&lt;&#x2F;span&gt;, &lt;span class=&quot;z-entity z-other z-inherited-class z-haskell&quot;&gt;Show&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;

pattern &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;ERROR_UPLOADING_DOCUMENT&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DOCUMENT_NOT_FOUND&lt;&#x2F;span&gt;
      &lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;USER_NOT_FOUND&lt;&#x2F;span&gt;
     &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Err&lt;&#x2F;span&gt;
pattern &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;ERROR_UPLOADING_DOCUMENT&lt;&#x2F;span&gt;   &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;InternalError&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Document uploading error&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
pattern &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DOCUMENT_NOT_FOUND&lt;&#x2F;span&gt;         &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;NotFound&lt;&#x2F;span&gt;      &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Document was not found on the Storage&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
pattern &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;USER_NOT_FOUND&lt;&#x2F;span&gt;             &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;NotFound&lt;&#x2F;span&gt;      &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;User was not found on the system&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Error&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Err&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case the library already provide a &lt;strong&gt;Higher Order Type&lt;&#x2F;strong&gt; which is &lt;code&gt;newtype Error e r&lt;&#x2F;code&gt; which Value Constructor is &lt;code&gt;Error :: e -&amp;gt; Error e r&lt;&#x2F;code&gt;, therefore its kind is &lt;code&gt;* -&amp;gt; * -&amp;gt; *&lt;&#x2F;code&gt;. Our alias is &lt;code&gt;type AppError = Error Err&lt;&#x2F;code&gt; whose kind is &lt;code&gt;* -&amp;gt; *&lt;&#x2F;code&gt; which coincide with the Kind that is contain by the Indexed &lt;strong&gt;Open Union Type&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; class=&quot;language-shell z-code&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;λx.x&amp;gt; import Control.Monad.Freer
λx.x&amp;gt; :k Eff
Eff :: [* -&amp;gt; *] -&amp;gt; * -&amp;gt; *
λx.x&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;handlers-or-interpreters&quot;&gt;Handlers or Interpreters&lt;&#x2F;h3&gt;
&lt;p&gt;The next step is to provide some interpretation for those effects, we can have either &lt;em&gt;pure&lt;&#x2F;em&gt; interpretations which is going to be mainly used for Testing where we need to be deterministic, or &lt;strong&gt;side effects&lt;&#x2F;strong&gt; interpretations which is going to be connecting to Database, APIs, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Lets see some example of &lt;em&gt;side effects&lt;&#x2F;em&gt; interpretations for this effects presented above.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;logging-interpreter&quot;&gt;Logging Interpreter&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Colog&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;C&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Servant&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runColog&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;forall&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;. (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;)
             &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
             &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runColog &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
    interpretM &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;case&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogInfo&lt;&#x2F;span&gt;  msg &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; withColog &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;I&lt;&#x2F;span&gt; msg
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogError&lt;&#x2F;span&gt; msg &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; withColog &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;E&lt;&#x2F;span&gt; msg

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;withColog&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Severity&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;IO&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-constant z-unit z-haskell&quot;&gt;()&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;withColog s &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; usingLoggerT (cmap fmtMessage logTextStdout) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;C&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;log s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The important thing to point out here is that in &lt;code&gt;runColog&lt;&#x2F;code&gt; interpretation we are receiving the Effect that is being waited by this Handler, as we explain in the &lt;a href=&quot;https:&#x2F;&#x2F;jproyo.github.io&#x2F;posts&#x2F;2021-03-17-encoding-effects-with-freer-simple&#x2F;#freer-simple&quot;&gt;introduction to the library&lt;&#x2F;a&gt;. Because of this, the &lt;em&gt;Effect&lt;&#x2F;em&gt; that is the first parameter passed to this interpreter is only indexed by &lt;code&gt;Logging&lt;&#x2F;code&gt; Algebra plus some possible rest of Algebras. This is Sum Type is indicated by the use of &lt;em&gt;Cons&lt;&#x2F;em&gt; &lt;code&gt;(&#x27;:)&lt;&#x2F;code&gt; at Type level, finally returning that possible rest of effects without the &lt;code&gt;Logging&lt;&#x2F;code&gt; Algebra inside. This is a great and powerful semantic because we are stating by its types that we are taking of &lt;code&gt;Logging&lt;&#x2F;code&gt; Algebra and that is not going to be part anymore of the &lt;em&gt;Open Union&lt;&#x2F;em&gt; after this interpreter runs.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;LastMember Handler effs&lt;&#x2F;code&gt; Constraint indicates that the last effect in the Stack is going to be &lt;code&gt;Handler&lt;&#x2F;code&gt;, since on top of this we are running a Servant API which is the last Monadic computation. This is not breaking any abstraction at all because this is the interpreter and not the Algebra, and we know that this interpreter is going to be use only by our &lt;em&gt;Servant&lt;&#x2F;em&gt; API. We can write other interpreters if we are in other context different that Servant.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;database-interpreter&quot;&gt;Database Interpreter&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Database.PostgreSQL.Simple&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;D&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Database.PostgreSQL.Simple.Transaction&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;T&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Database.PostgreSQL.Simple.SqlQQ&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runPostgresql&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;forall&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;. (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[ &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;)
              &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt;
              &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
              &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runPostgresql conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
    interpret &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;case&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UserExists&lt;&#x2F;span&gt; userId &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; callUserExists conf userId
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;SetDocumentUploaded&lt;&#x2F;span&gt; docToUpload docRef  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; callSetDocumentUploaded conf docToUpload docRef

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;callUserExists&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;)
                        &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;callUserExists conf userId &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;do&lt;&#x2F;span&gt;
  logInfo &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Calling for to check if user exist in the Database&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  conn &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; connectPostgreSQL (conf^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;dbConnection &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;L&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;to encodeUtf8)
  [&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Only&lt;&#x2F;span&gt; i] &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;D&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;query
                        conn
                        &lt;span class=&quot;z-meta z-other z-quasiquote z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-quasibracket z-haskell&quot;&gt;[sql|&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                            SELECT 1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                            FROM users&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                            where user_id = ?&amp;#39;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-quasibracket z-haskell&quot;&gt;|]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
                        userId
   return &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; (i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;)

&lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; callSetDocumentUploaded is similar but with an D.execute statement
&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Some details of the implementation is not provided here.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Important thing here to remark is that we can interleave other &lt;em&gt;Effects&lt;&#x2F;em&gt; in the stack in this interpretation without needing any lifting or complex process. We are just saying that in the same context we have other effects like &lt;code&gt;AppError&lt;&#x2F;code&gt; or &lt;code&gt;Logging&lt;&#x2F;code&gt; and we can use those Algebras that are going to be interpret at some point in time.&lt;&#x2F;p&gt;
&lt;p&gt;Another important aspect is that &lt;code&gt;Conf&lt;&#x2F;code&gt; object can be easily introduce with a &lt;code&gt;Reader&lt;&#x2F;code&gt; that is already provided by &lt;strong&gt;freer-simple&lt;&#x2F;strong&gt; and we can have something implicit instead of explicit. I wanted to leave it as explicit just for the purpose of the example, but in practice I am using it with &lt;code&gt;Reader&lt;&#x2F;code&gt; and it looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Freer.Reader&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;RE&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Database.PostgreSQL.Simple&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;D&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Database.PostgreSQL.Simple.Transaction&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;T&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Database.PostgreSQL.Simple.SqlQQ&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runPostgresql&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;forall&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;. (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[ &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;)
              &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
              &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runPostgresql conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
    interpret &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;case&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UserExists&lt;&#x2F;span&gt; userId &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; callUserExists userId
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;SetDocumentUploaded&lt;&#x2F;span&gt; docToUpload docRef  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; callSetDocumentUploaded docToUpload docRef

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;callUserExists&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;)
                        &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;callUserExists userId &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;do&lt;&#x2F;span&gt;
  conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;RE&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;ask
  logInfo &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Calling for to check if user exist in the Database&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
  conn &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; connectPostgreSQL (conf^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;dbConnection &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;L&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;to encodeUtf8)
  [&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Only&lt;&#x2F;span&gt; i] &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;D&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;query
                        conn
                        &lt;span class=&quot;z-meta z-other z-quasiquote z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-quasibracket z-haskell&quot;&gt;[sql|&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                            SELECT 1&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                            FROM users&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                            where user_id = ?&amp;#39;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-string z-quasiquoted z-haskell&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-quasibracket z-haskell&quot;&gt;|]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
                        userId
   return &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; (i &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-haskell&quot;&gt;1&lt;&#x2F;span&gt;)

&lt;span class=&quot;z-comment z-line z-double-dash z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-haskell&quot;&gt;--&lt;&#x2F;span&gt; callSetDocumentUploaded is similar but with an D.execute statement
&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;aws-s3-interpreter&quot;&gt;AWS S3 Interpreter&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Lens&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;L&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Trans.AWS&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;A&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Control.Monad.Catch&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;MC&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-import z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-other z-module z-haskell&quot;&gt;Network.AWS.S&lt;&#x2F;span&gt;3&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runS3Storage&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;forall&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;. (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;S&lt;&#x2F;span&gt;.&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;,  &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[ &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;S&lt;&#x2F;span&gt;.&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;)
             &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt;
             &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
             &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runS3Storage conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
    interpret &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;case&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UploadDocument&lt;&#x2F;span&gt; doc &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; uploadFile conf doc

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;uploadFile&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;LastMember&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;S&lt;&#x2F;span&gt;.&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;S&lt;&#x2F;span&gt;.&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt;)
           &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Document&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;uploadFile conf doc &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;do&lt;&#x2F;span&gt;
    env &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; getEnv conf
    &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; bucketName &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; conf^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;bucketName
    &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;let&lt;&#x2F;span&gt; key &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; objectKey conf doc
    result &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; liftIO &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;MC&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;try &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runResourceT &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runAWST env &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;A&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;send &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; putObject&amp;#39; bucketName key &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; doc
    either toInternalError (const (key^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;_ObjectKey&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;L&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;to (pure &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt;))) result

    &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;where&lt;&#x2F;span&gt;
        putObject&amp;#39; bucketName key doc&amp;#39; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; putObject (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;BucketName&lt;&#x2F;span&gt; bucketName) key (doc&amp;#39;^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;dtuContent &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;L&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;to toBody)
                                         &amp;amp; set poContentType (doc&amp;#39;^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;document^&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;?&lt;&#x2F;span&gt;contentType)


&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: Some details of the implementation is not provided here.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;run-interpreters&quot;&gt;Run Interpreters&lt;&#x2F;h3&gt;
&lt;p&gt;Finally we need to have the Continuation Monad running with all the Handlers waiting for their requests.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runEffects&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &amp;#39;[ &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; ] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runEffects conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; (either toServantError return &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&amp;lt;&amp;lt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;
                    runM &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;
                    runError &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;
                    runColog &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;
                    runPostgresql conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;
                    runS3Storage conf

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;toServantError&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;MonadError&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;ServerError&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Err&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;toServantError (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;BadRequest&lt;&#x2F;span&gt; msg)    &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; throwError err400 { errBody &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; toSL msg }
toServantError (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;InternalError&lt;&#x2F;span&gt; msg) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; throwError err500 { errBody &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; toSL msg }
toServantError (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;NotFound&lt;&#x2F;span&gt; msg)      &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; throwError err404 { errBody &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; toSL msg }
toServantError (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Forbidden&lt;&#x2F;span&gt; msg)     &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; throwError err403 { errBody &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; toSL msg }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we have our &lt;em&gt;Program&lt;&#x2F;em&gt; and our &lt;em&gt;Interpretation&lt;&#x2F;em&gt;, therefore it is a matter of composing them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;run&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Conf&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Document&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Handler&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;run conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; runEffects conf &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; uploadDocument
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;test&quot;&gt;Test&lt;&#x2F;h2&gt;
&lt;p&gt;As we are going to see now, implementing &lt;strong&gt;Mocks&lt;&#x2F;strong&gt; and Testing our &lt;em&gt;Effectful Programs&lt;&#x2F;em&gt; in a deterministic manner is straightforward and easy.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; class=&quot;language-haskell z-code&quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span class=&quot;z-source z-haskell&quot;&gt;
&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;data&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt;
  { _bUserExists      &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; _bFailSetUploaded &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; _bFailUpload      &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Bool&lt;&#x2F;span&gt;
  &lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; _bDownload        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DownloadBoundary&lt;&#x2F;span&gt;
  } &lt;span class=&quot;z-meta z-deriving z-haskell&quot;&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;deriving&lt;&#x2F;span&gt; (&lt;span class=&quot;z-entity z-other z-inherited-class z-haskell&quot;&gt;Generic&lt;&#x2F;span&gt;)&lt;&#x2F;span&gt;

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runTest&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &amp;#39;[&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Identity&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Either&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Err&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runTest &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; runWithTest def

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runWithTest&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &amp;#39;[&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Identity&lt;&#x2F;span&gt;] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Either&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Err&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runWithTest boundaries &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; runIdentity &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runM &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runError &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runTestColog &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runPostgresqlTest boundaries &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt; runS3StorageTest boundaries

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runTestColog&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;forall&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;. &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
             &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runTestColog req &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;do&lt;&#x2F;span&gt;
    ((x&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; _)&lt;span class=&quot;z-punctuation z-separator z-comma z-haskell&quot;&gt;,&lt;&#x2F;span&gt; _) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;F&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;reinterpret2 go req &amp;amp; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;FS&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;runState &lt;span class=&quot;z-constant z-language z-empty-list z-haskell&quot;&gt;[]&lt;&#x2F;span&gt; &amp;amp; runWriter
    pure x
  &lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;where&lt;&#x2F;span&gt;
&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;    &lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;go&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Logging&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;v&lt;&#x2F;span&gt;
       &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;FS&lt;&#x2F;span&gt;.&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;State&lt;&#x2F;span&gt; [&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt;] &amp;#39;: &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;FW&lt;&#x2F;span&gt;.&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Writer&lt;&#x2F;span&gt; [&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Text&lt;&#x2F;span&gt;] &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;v&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;    go (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogInfo&lt;&#x2F;span&gt; msg)  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; tell [&lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;INFO: &lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&amp;gt;&lt;&#x2F;span&gt;msg]
    go (&lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;LogError&lt;&#x2F;span&gt; msg) &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt; tell [&lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;ERROR: &lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;&amp;lt;&amp;gt;&lt;&#x2F;span&gt;msg]

&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runPostgresqlTest&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[ &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt; ] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DataAccess&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runPostgresqlTest &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt;{&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;..&lt;&#x2F;span&gt;} &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
    interpret &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;case&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UserExists&lt;&#x2F;span&gt; userId &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; return _bUserExists
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;SetDocumentUploaded&lt;&#x2F;span&gt; _ _  &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; when _bFailSetUploaded &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;FE&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;throwError &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;ERROR_UPLOADING_DOCUMENT&lt;&#x2F;span&gt;


&lt;span class=&quot;z-meta z-function z-type-declaration z-haskell&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-haskell&quot;&gt;runS3StorageTest&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-double-colon z-haskell&quot;&gt;::&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Members&lt;&#x2F;span&gt; &amp;#39;[ &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;AppError&lt;&#x2F;span&gt; ] &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-big-arrow z-haskell&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; (&lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;DocStorage&lt;&#x2F;span&gt; &amp;#39;: &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt;) &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-arrow z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-haskell&quot;&gt;Eff&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;effs&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-generic-type z-haskell&quot;&gt;a&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;runS3StorageTest &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;Boundaries&lt;&#x2F;span&gt;{&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;..&lt;&#x2F;span&gt;} &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;=&lt;&#x2F;span&gt;
    interpret &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt;
        &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;\&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-other z-haskell&quot;&gt;case&lt;&#x2F;span&gt;
            &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;UploadDocument&lt;&#x2F;span&gt; _ &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;if&lt;&#x2F;span&gt; _bFailUpload
                                  &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;FE&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;.&lt;&#x2F;span&gt;throwError &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;ERROR_UPLOADING_DOCUMENT&lt;&#x2F;span&gt;
                                  &lt;span class=&quot;z-keyword z-control z-haskell&quot;&gt;else&lt;&#x2F;span&gt; return &lt;span class=&quot;z-keyword z-operator z-haskell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-haskell&quot;&gt;DocRef&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-haskell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;test_ref&lt;span class=&quot;z-punctuation z-definition z-string z-end z-haskell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is just a matter of implementing the right interpreters in the format that we want that allow us to run any test or combination we might need.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;freer-simple&lt;&#x2F;strong&gt; library is an &lt;em&gt;ergonomic&lt;&#x2F;em&gt; but not &lt;em&gt;easy&lt;&#x2F;em&gt; &lt;strong&gt;Effect System&lt;&#x2F;strong&gt; library that is based on Academic Research Papers and provide a Robust and Extensible way to build &lt;em&gt;Effectful Programs&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;On the other hand we have seen the flexibility this tooling has providing us with some built-in &lt;em&gt;effects&lt;&#x2F;em&gt; like &lt;code&gt;Reader&lt;&#x2F;code&gt;, &lt;code&gt;Writer&lt;&#x2F;code&gt;, &lt;code&gt;State&lt;&#x2F;code&gt; and so on.&lt;&#x2F;p&gt;
&lt;p&gt;Finally we have seen how we can quickly define &lt;em&gt;pure&lt;&#x2F;em&gt; interpreters or &lt;em&gt;Handlers&lt;&#x2F;em&gt; to escape from the &lt;em&gt;non-deterministic&lt;&#x2F;em&gt; context and be able to Test our programs. This interpretations are easy to built, avoiding the $$O(n^2)$$ problem on &lt;strong&gt;mtl&lt;&#x2F;strong&gt; instances without requiring &lt;strong&gt;Monad&lt;&#x2F;strong&gt; mock instances; and highly composable as well.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;acknowledges&quot;&gt;Acknowledges&lt;&#x2F;h2&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https:&#x2F;&#x2F;monadplus.pro&#x2F;&quot;&gt;@monadplus&lt;&#x2F;a&gt; who review this Article and help me to improve it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix-prerequisites-for-running-code&quot;&gt;Appendix - Prerequisites for running code&lt;&#x2F;h2&gt;
&lt;p&gt;The following are prerequisites for running examples here:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ghc&quot;&gt;GHC&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;GHC 8.6.5 or above&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;language-extensions&quot;&gt;Language Extensions&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;DataKinds&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;DeriveAnyClass&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;DeriveGeneric&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;DerivingStrategies&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;DerivingVia&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;GADTs&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;GeneralizedNewtypeDeriving&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;LambdaCase&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;OverloadedStrings&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;PartialTypeSignatures&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;RecordWildCards&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;Rank2Types&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;RankNTypes&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;ScopedTypeVariables&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TypeApplications&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TypeFamilies&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;TypeOperators&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;yaml&quot; class=&quot;language-yaml z-code&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;z-source z-yaml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;aeson&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;amazonka&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;amazonka-s3&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;base&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;base58-bytestring&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;bytestring&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;co-log&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;conduit&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;conduit-extra&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;exceptions&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;freer-simple&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;lens&lt;&#x2F;span&gt;
&lt;span class=&quot;z-punctuation z-definition z-block z-sequence z-item z-yaml&quot;&gt;-&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-unquoted z-plain z-out z-yaml&quot;&gt;text&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And also extra deps for &lt;code&gt;servant&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
